name: IFAP Web CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job para testing del backend
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ifap
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DB_NAME=test_ifap" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_PORT=5432" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV

    - name: Run Django migrations
      working-directory: ./backend
      run: |
        python manage.py migrate --settings=ifap_backend.settings

    - name: Run Django tests
      working-directory: ./backend
      run: |
        python manage.py test --settings=ifap_backend.settings --verbosity=2

    - name: Run pytest with coverage
      working-directory: ./backend
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Run Django linting
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Job para testing del frontend
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Job para análisis de seguridad
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      uses: securecodewarrior/github-action-add-bandit@v1.0.0
      with:
        path: ./backend

    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level=high

    - name: Run safety check for Python dependencies
      working-directory: ./backend
      run: |
        pip install safety
        safety check -r requirements.txt

  # Job para deployment en staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.ifap.edu.pe

    steps:
    - uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí iría la lógica de deployment real
        # Por ejemplo, usando SSH, Docker, o servicios cloud

    - name: Run staging health check
      run: |
        echo "Running health checks on staging..."
        # Verificar que el deployment fue exitoso

  # Job para deployment en producción
  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://ifap.edu.pe

    steps:
    - uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí iría la lógica de deployment real

    - name: Run production health check
      run: |
        echo "Running health checks on production..."

    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"

  # Job para análisis de código
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job para verificación de dependencias
  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check Python dependencies for vulnerabilities
      working-directory: ./backend
      run: |
        pip install pip-audit
        pip-audit -r requirements.txt

    - name: Check Node.js dependencies for vulnerabilities
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate

  # Job para tests de integración
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ifap
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && npm ci

    - name: Start backend server
      working-directory: ./backend
      run: |
        python manage.py migrate
        python manage.py runserver &
        sleep 10
      env:
        SECRET_KEY: test-secret-key
        DEBUG: True
        DB_NAME: test_ifap
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432

    - name: Run integration tests
      working-directory: ./frontend
      run: |
        npm run test:integration

    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/api/users/ || exit 1
        curl -f http://localhost:8000/api/courses/ || exit 1